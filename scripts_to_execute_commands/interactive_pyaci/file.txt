
    To control your device, use d[x], where x is the device index.
    Devices are indexed based on the order of the COM ports specified by the -d option.
    The first device, d[0], can also be accessed using device.

    Type d[x]. and hit tab to see the available methods.

Python 3.7.3 (default, Jan 22 2021, 20:04:44) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.34.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
In [1]: 
In [1]: ---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
~/Mesh_demo/nrf5sdkformeshv500src/scripts/interactive_pyaci/interactive_pyaci.py in <module>
    284         options.log_level = logging.DEBUG
    285 
--> 286     start_ipython(options)

~/Mesh_demo/nrf5sdkformeshv500src/scripts/interactive_pyaci/interactive_pyaci.py in start_ipython(options)
    238     ipython_config.InteractiveShellApp.log_level = logging.DEBUG
    239 
--> 240     IPython.embed(config=ipython_config)
    241     for dev in d:
    242         dev.close()

~/.local/lib/python3.7/site-packages/IPython/terminal/embed.py in embed(**kwargs)
    387         frame.f_code.co_filename, frame.f_lineno), **kwargs)
    388     shell(header=header, stack_depth=2, compile_flags=compile_flags,
--> 389         _call_location_id='%s:%s' % (frame.f_code.co_filename, frame.f_lineno))
    390     InteractiveShellEmbed.clear_instance()
    391     #restore previous instance

~/.local/lib/python3.7/site-packages/IPython/terminal/embed.py in __call__(self, header, local_ns, module, dummy, stack_depth, global_ns, compile_flags, **kw)
    227         # our call and get the original caller's namespaces.
    228         self.mainloop(local_ns, module, stack_depth=stack_depth,
--> 229                       global_ns=global_ns, compile_flags=compile_flags)
    230 
    231         self.banner2 = self.old_banner2

~/.local/lib/python3.7/site-packages/IPython/terminal/embed.py in mainloop(self, local_ns, module, stack_depth, display_banner, global_ns, compile_flags)
    322 
    323         with self.builtin_trap, self.display_trap:
--> 324             self.interact()
    325         
    326         # now, purge out the local namespace of IPython's hidden variables.

~/.local/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py in interact(self, display_banner)
    547 
    548             try:
--> 549                 code = self.prompt_for_code()
    550             except EOFError:
    551                 if (not self.confirm_exit) \

~/.local/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py in prompt()
    287             def prompt():
    288                 prompt_text = "".join(x[1] for x in self.prompts.in_prompt_tokens())
--> 289                 lines = [input(prompt_text)]
    290                 prompt_continuation = "".join(x[1] for x in self.prompts.continuation_prompt_tokens())
    291                 while self.check_complete('\n'.join(lines))[0] == 'incomplete':

~/.local/lib/python3.7/site-packages/IPython/utils/py3compat.py in input(prompt)
    145 # to forward requests to a frontend.
    146 def input(prompt=''):
--> 147     return builtin_mod.input(prompt)
    148 
    149 builtin_mod_name = "builtins"

KeyboardInterrupt: 
